/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 shirt-compressed.glb 
*/

import React, { useEffect, useRef, useState } from 'react';
import { Text, useGLTF, Html, Decal, useTexture } from '@react-three/drei';
import { useSnapshot } from 'valtio';
import { state } from './state';
import { useDrag, useGesture } from '@use-gesture/react';
import PullRelease from './PullRelease';
import { TextGeometry } from 'three/examples/jsm/Addons.js';
import { useSpring, animated } from '@react-spring/web';
import createTextCanvas from './TextureCanvas';
import * as THREE from 'three';
import { Box, TextField } from '@mui/material';
import { modelObjects } from '../constants';
import { useLoader } from '@react-three/fiber';

const modelName = 'vividora-compressed.glb';

export function Shirt({ model }) {
  const group = useRef();
  const snap = useSnapshot(state);

  const shirtFrontRef = useRef();

  const { nodes, materials } = useGLTF(modelName);

  const logoTexture = useTexture(snap.imageUrl || '/logo1.png');

  console.log({ logoTexture });

  const backLogoTexture = useTexture('background.jpg');

  const [textSize, setTextSize] = useState(50);
  const [isDragging, setIsDragging] = useState(false);

  const [text, setText] = useState('Hello, World!');
  const [textPosition, setTextPosition] = useState({ x: 0, y: 0 });

  const [logoPosition, setLogoPosition] = useState({ x: 0, y: 0, z: 0.2 });

  const [backLogoPosition, setBackLogoPosition] = useState({
    x: 0,
    y: 1.19,
    z: -0.1,
  });

  const [logoProperties, setLogoProperties] = useState({ scale: 0.3 });

  const [texture, setTexture] = useState(null);

  const bind = useGesture({
    onDrag: ({ offset: [x, y], event }) => {
      console.log({ x, y });
      console.log({ event });
      state.isDragging = true;
      console.log('previousPos:', logoPosition);

      const posX = logoPosition.x + x / 10000;
      const posY = logoPosition.y + -y / 10000;

      let newPosX, newPosY;

      if (posX < 0.3 && posX > -0.3) {
        newPosX = posX;
      } else if (posX > logoPosition.x) {
        newPosX = logoPosition.x - 0.001;
      } else if (posX < logoPosition.x) {
        newPosX = logoPosition.x + 0.001;
      } else {
        newPosX = logoPosition.x;
      }

      if (posY < 1.4 && posY > 1.2) {
        newPosY = posY;
      } else if (posY > logoPosition.y) {
        newPosY = logoPosition.y + 0.001;
      } else if (posY < logoPosition.y) {
        newPosY = logoPosition.y - 0.001;
      } else {
        newPosY = logoPosition.y;
      }

      const newPosition = {
        ...logoPosition,
        x: newPosX,
        y: newPosY,
      };
      console.log('newPosition:', newPosition);
      setLogoPosition(newPosition);
    },
    onDragEnd: () => {
      console.log('drag end');
      state.isDragging = false;
    },
  });

  const handleChangePositionX = (value) => {
    setLogoPosition((prevPosition) => {
      return { ...prevPosition, x: Number(value) };
    });
  };

  const handleChangePositionY = (value) => {
    setLogoPosition((prevPosition) => {
      return { ...prevPosition, y: Number(value) };
    });
  };

  const handleChangePositionZ = (value) => {
    setLogoPosition((prevPosition) => {
      return { ...prevPosition, z: Number(value) };
    });
  };

  const handleChangeLogoScale = (value) => {
    setLogoProperties((prevProps) => {
      return { ...prevProps, scale: Number(value) };
    });
  };

  const handleImageClick = (e, side = '') => {
    e.stopPropagation();
    state.model.selectedImage = side;
  };

  useEffect(() => {
    const { canvas } = createTextCanvas('Hello, World', 512, 512, 100);
    const texture = new THREE.CanvasTexture(canvas);
    setTexture(texture);
  }, []);
  return (
    //actual
    <group dispose={null} scale={3} position={[0, -2.3, 0]}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.shoulder1.geometry}
        material={materials.Popcorn_Terry_FRONT_2675}
        material-color={snap.items.Body_FRONT_2664}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.shoulder2.geometry}
        material={materials.Popcorn_Terry_FRONT_2675}
        material-color={snap.items.Body_FRONT_2664}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.collar.geometry}
        material={materials.Rib_Dark_FRONT_2661}
        material-color={snap.items.Body_FRONT_2664}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.frontprint.geometry}
        material={materials['Popcorn_Terry_FRONT_2675.008']}
        material-color={snap.items.Body_FRONT_2664}
      >
        {' '}
        {logoTexture && snap?.imageUrl && (
          <Decal
            debug={false}
            position={[
              state.model[`${modelObjects.frontImage}`]?.position.x,
              state.model[`${modelObjects.frontImage}`]?.position.y,
              state.model[`${modelObjects.frontImage}`]?.position.z,
            ]}
            rotation={[0, 0, 0]}
            scale={state.model[`${modelObjects.frontImage}`]?.scale}
            map={logoTexture}
            onPointerDown={(e) => handleImageClick(e, modelObjects.frontImage)}

            // {...bind()}
          ></Decal>
        )}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.backprint.geometry}
        material={materials['Popcorn_Terry_FRONT_2675.008']}
        material-color={snap.items.Body_FRONT_2664}
      >
        {texture && false && (
          <Decal
            debug={false}
            position={[
              state.model[`${modelObjects.backImage}`]?.position.x,
              state.model[`${modelObjects.backImage}`]?.position.y,
              state.model[`${modelObjects.backImage}`]?.position.z,
            ]}
            rotation={[0, Math.PI, 0]}
            scale={state.model[`${modelObjects.backImage}`]?.scale}
            map={backLogoTexture}
            onPointerDown={(e) => handleImageClick(e, modelObjects.backImage)}
          ></Decal>
        )}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.front.geometry}
        material={materials['Popcorn_Terry_FRONT_2675.008']}
        material-color={snap.items.Body_FRONT_2664}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.back.geometry}
        material={materials['Popcorn_Terry_FRONT_2675.008']}
        material-color={snap.items.Body_FRONT_2664}
      />
    </group>

    // <group dispose={null} scale={3} position={[0, -2.3, 0]}>
    //   <mesh
    //     castShadow
    //     receiveShadow
    //     geometry={nodes.Collar.geometry}
    //     material={materials.Rib_Dark_FRONT_2661}
    //   />
    //   <mesh
    //     castShadow
    //     receiveShadow
    //     geometry={nodes.Shirt.geometry}
    //     material={materials.Popcorn_Terry_FRONT_2675}
    //   />
    //   <mesh
    //     castShadow
    //     receiveShadow
    //     geometry={nodes.Front_1.geometry}
    //     material={materials.Popcorn_Terry_FRONT_2675}
    //     material-color={snap.items.Body_FRONT_2664}
    //   >
    //     {' '}
    // {/* {texture && (
    //   <Decal
    //     debug={true}
    //     position={[logoPosition.x, logoPosition.y, logoPosition.z]}
    //     rotation={[0, 0, 0]}
    //     scale={logoProperties.scale}
    //     map={logoTexture}
    //     // {...bind()}
    //   ></Decal>
    // )} */}
    //   </mesh>
    //   <mesh
    //     castShadow
    //     receiveShadow
    //     geometry={nodes.Back.geometry}
    //     material={materials.Popcorn_Terry_FRONT_2675}
    //   >
    // {texture && (
    //   <Decal
    //     debug={false}
    //     position={[
    //       backLogoPosition.x,
    //       backLogoPosition.y,
    //       backLogoPosition.z,
    //     ]}
    //     rotation={[0, Math.PI, 0]}
    //     scale={logoProperties.scale}
    //     map={backLogoTexture}
    //   ></Decal>
    // )}
    //   </mesh>
    // <Html>
    //   <Box
    //     display='flex'
    //     flexDirection='column'
    //     alignItems='center'
    //     justifyContent='center'
    //     position='absolute'
    //     left='-6rem'
    //   >
    //     <label for='x-axis'>X-axis</label>

    //     <input
    //       id='x-axis'
    //       placeholder='change x-axis'
    //       type='number'
    //       step={0.01}
    //       onChange={(e) => handleChangePositionX(e.target.value)}
    //       defaultValue={logoPosition?.x}
    //     />

    //     <label for='y-axis'>Y-axis</label>

    //     <input
    //       id='y-axis'
    //       placeholder='change y-axis'
    //       type='number'
    //       step={0.01}
    //       onChange={(e) => handleChangePositionY(e.target.value)}
    //       defaultValue={logoPosition?.y}
    //     />

    //     <label for='scale'>Scale</label>

    //     <input
    //       id='scale'
    //       placeholder='scale'
    //       type='number'
    //       step={0.01}
    //       onChange={(e) => handleChangeLogoScale(e.target.value)}
    //       defaultValue={logoProperties.scale}
    //     />
    //   </Box>
    // </Html>
    // </group>
  );
}

useGLTF.preload(modelName);
